---
import type { CollectionEntry } from "astro:content";

import Masthead from "@/components/blog/Masthead.astro";
import TOC from "@/components/blog/TOC.astro";
import WebMentions from "@/components/blog/webmentions/index.astro";

import BaseLayout from "./Base.astro";

interface Props {
	post: CollectionEntry<"post">;
}

const { post } = Astro.props;
const {
	data: { description, ogImage, publishDate, title, updatedDate },
	slug,
} = post;
const socialImage = ogImage ?? `/og-image/${slug}.png`;
const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString();
const { headings } = await post.render();
import { Schema } from "astro-seo-schema";
---

<Schema
	item={{
		"@context": "https://schema.org",
		"@type": "BlogPosting",
		headline: title,
		datePublished: articleDate,
		dateModified: updatedDate?.toISOString(),
    url: `https://anjaygoel.com/posts/${slug}`,
		image: `https://anjaygoel.com${socialImage}`,
		author: {
			"@type": "Person",
			name: "Anjay Goel",
		},
		description: description,
	}}
/>

<BaseLayout meta={{ articleDate, description, ogImage: socialImage, title }}>
	<div class="gap-x-10 lg:flex lg:items-start">
		{!!headings.length && <TOC headings={headings} />}
		<article class="flex-grow break-words" data-pagefind-body>
			<div id="blog-hero">
				<Masthead content={post} />
			</div>
			<div
				class="prose prose-sm prose-cactus mt-12 prose-headings:font-semibold prose-headings:text-accent-2 prose-headings:before:absolute prose-headings:before:-ms-4 prose-headings:before:text-accent sm:prose-headings:before:content-['#'] sm:prose-th:before:content-none prose-p:indent-6"
			>
				<slot />
				<WebMentions />
			</div>
		</article>
	</div>
	<button
		aria-label="Back to Top"
		class="z-90 fixed bottom-8 end-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:end-8 sm:h-12 sm:w-12"
		data-show="false"
		id="to-top-btn"
	>
		<svg
			aria-hidden="true"
			class="h-6 w-6"
			fill="none"
			focusable="false"
			stroke="currentColor"
			stroke-width="2"
			viewBox="0 0 24 24"
			xmlns="http://www.w3.org/2000/svg"
		>
			<path d="M4.5 15.75l7.5-7.5 7.5 7.5" stroke-linecap="round" stroke-linejoin="round"></path>
		</svg>
	</button>
</BaseLayout>

<script>
	document.addEventListener("DOMContentLoaded", (_) => {
		const theme = document.documentElement.getAttribute("data-theme");
		const script = document.createElement("script");
		script.src = "https://giscus.app/client.js";
		script.setAttribute("data-repo", "anjaygoel/anjaygoel.github.io");
		script.setAttribute("data-repo-id", "MDEwOlJlcG9zaXRvcnkzNzY2MjI0MjY=");
		script.setAttribute("data-category", "General");
		script.setAttribute("data-category-id", "DIC_kwDOFnLNWs4CQ8t3");
		script.setAttribute("data-mapping", "title");
		script.setAttribute("data-strict", "0");
		script.setAttribute("data-reactions-enabled", "1");
		script.setAttribute("data-emit-metadata", "0");
		script.setAttribute("data-input-position", "top");
		script.setAttribute("data-theme", theme === "dark" ? "dark" : "light");
		script.setAttribute("data-lang", "en");
		script.setAttribute("crossorigin", "anonymous");
		script.async = true;
		document.addEventListener("theme-change", (e) => {
			const iframe = document.querySelector("iframe.giscus-frame") as HTMLIFrameElement;
			if (iframe && iframe.contentWindow) {
				iframe.contentWindow.postMessage(
					{
						giscus: {
							setConfig: {
								theme:
									(
										e as CustomEvent<{
											theme: string;
										}>
									).detail.theme === "dark"
										? "dark"
										: "light",
							},
						},
					},
					"https://giscus.app",
				);
			}
		});

		document.body.appendChild(script);
	});
</script>
<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	const targetHeader = document.getElementById("blog-hero") as HTMLDivElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ behavior: "smooth", top: 0 });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);
</script>
